"""
Productcard Component.

This component was auto-generated by fletx.

üõ†Ô∏è Customization Guide:
- You can change the parent class (`ft.Container`) to inherit from any other Flet control.
  ‚Üí Example: `ft.Text`, `ft.Row`, `ft.Column`, or any custom Flet widget.
- You can add or modify internal reactive attributes.
  ‚Üí Example: `self.title: RxStr = rx_title`
- You can define simple or advanced bindings using the fletx decorators
"""

from flet import *
from fletx import FletX
from fletx.decorators import obx
from fletx.utils import get_page
from fletx.navigation import navigate

from app.controllers import ProductsController
from app.models import ProductInfo

class ProductCard(Container):   
    """Reactive Productcard Widget"""

    def __init__(self, product: ProductInfo, **kwargs):
        # üìù Define your reactive properties
        self.product: ProductInfo = product

        # init super
        super().__init__(
            # bgcolor = Colors.SURFACE,
            **kwargs
        )

        self.width = get_page().width * .5

        # Inject controler
        self.productController: ProductsController = FletX.find(
            ProductsController, tag = 'product_ctrl'
        )

        self.liked = self.productController.create_rx_bool(self.product.has_been_liked)
        self.clicked = False
        # Build content
        self.content = self.build()
        
        # Setup click action
        self.on_click = lambda _: navigate(
            '/product-details',
            data = {"product": self.product}
        )

    def process_like_dislike(self):
        """Process like dislike logic"""

        self.clicked = True 
        # toggle like state
        self.liked.toggle()
        action: str = 'post' if not self.product.has_been_liked else 'delete'

        res = self.productController.like_or_dislike(
            self.product.id, action = action
        )
        if res:
            self.product.has_been_liked = res.has_been_liked
            self.liked.value = res.has_been_liked
        self.clicked = False

    @obx
    def like_btn(self):
        """Favorite button"""

        return IconButton(
            top = 8,
            right = 8,
            bgcolor = Colors.with_opacity(.3, Colors.SURFACE),
            on_click = lambda _ : (
                None    #TODO: Call like action with product controller
                if self.productController._is_loading.value
                else self.process_like_dislike()
            ),
            content = (
                ProgressRing(
                    height = 25,
                    width = 25,
                    color = Colors.ON_SURFACE
                )
                if self.productController._is_loading.value and self.clicked
                else Icon(
                    Icons.FAVORITE,
                    color = Colors.with_opacity(.6, Colors.ON_SURFACE) if not self.liked.value else Colors.PRIMARY,
                ) 
            )
        ) # TODO: CHECK IF USER IS LOGGED IN.
    
    @obx
    def cart_btn(self):
        """Favorite button"""

        return IconButton(
            top = 56,
            right = 8,
            bgcolor = Colors.with_opacity(.3, Colors.SURFACE),
            on_click = lambda _ : (
                self.productController.remove_from_cart(self.product)    #TODO: Call like action with product controller
                if self.productController.has_cart_item(self.product)
                else self.productController.add_to_cart(self.product)
            ),
            content = Icon(
                (
                    Icons.ADD_SHOPPING_CART
                    if not self.productController.has_cart_item(self.product)
                    else Icons.REMOVE_SHOPPING_CART
                ),
                color = (
                    Colors.with_opacity(1, Colors.ON_SURFACE) 
                    if not self.productController.has_cart_item(self.product) 
                    else Colors.PRIMARY
                ),
            ) 
        )

    def build(self):
        """Build Product Card content"""

        return Stack(
            expand = True,
            width = self.width,
            controls = [
                # PRODUCT INFOS DISPLAY
                Column(
                    spacing = 2,
                    expand = True,
                    width = self.width,
                    # height = 110,
                    controls = [
                        # IMAGE
                        Container(
                            expand = True,
                            width = self.width,
                            bgcolor = Colors.SURFACE,
                            border_radius = 15,
                            clip_behavior = ClipBehavior.HARD_EDGE,

                            content = Image(
                                expand = True,
                                width = self.width,
                                src = self.product.medias[0].file,
                                fit = ImageFit.FIT_WIDTH
                            )
                        ),

                        # PRODUCT NAME
                        Column(
                            spacing = 5,
                            controls = [
                                Text(
                                    f'{self.product.name[:50]+'...'}',
                                    size = 14,
                                    weight = FontWeight.W_400
                                ),
                                Row(
                                    spacing = 15,
                                    alignment = MainAxisAlignment.START,
                                    controls = [
                                        Text(
                                            f'{self.product.price} FCFA',
                                            size = 16,
                                            weight = FontWeight.W_500
                                        ),

                                        Row(
                                            spacing = 0,
                                            alignment = MainAxisAlignment.START,
                                            controls = [
                                                Icon(
                                                    Icons.STAR_RATE_ROUNDED,
                                                    size = 24,
                                                    color = Colors.AMBER_600
                                                ),
                                                Text(
                                                    f'4.9',
                                                    size = 14,
                                                    weight = FontWeight.W_500,
                                                    color = Colors.ON_SURFACE_VARIANT
                                                )
                                            ]
                                        )
                                    ]
                                )
                            ]
                        )
                    ]
                ),

                # LIKE BUTTON
                self.like_btn(),

                # SHOPPING CART
                self.cart_btn()
            ]
        )

