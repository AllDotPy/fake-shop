"""
Loginform Component.

This component was auto-generated by fletx.

üõ†Ô∏è Customization Guide:
- You can change the parent class (`ft.Container`) to inherit from any other Flet control.
  ‚Üí Example: `ft.Text`, `ft.Row`, `ft.Column`, or any custom Flet widget.
- You can add or modify internal reactive attributes.
  ‚Üí Example: `self.title: RxStr = rx_title`
- You can define simple or advanced bindings using the fletx decorators
"""

import re
from typing import Callable, List, Optional, Dict, Any
from flet import *
from fletx import FletX
from fletx.core import (
    RxStr, RxBool, RxDict,
    FormFieldValidationRule
)
from fletx.navigation import navigate
from fletx.widgets import Obx
from fletx.decorators import (
    reactive_form
)
from fletx.utils import get_page

from .formfield_component import FromTextField
from app.controllers import AuthController
from app.models import LoginInfo
from app.utils import show_snackbar

@reactive_form(
    form_fields = {
        'phone': 'rx_phone',
        'password': 'rx_password',
    },
    validation_rules = {
        # 'phone': 'validate_email',
        'password': [
            FormFieldValidationRule(
                validate_fn = lambda value: not len(value) < 5,
                err_message = 'Password must be at least 8 characters long.'
            ),
            FormFieldValidationRule(
                validate_fn = lambda value: re.search(r"[A-Z]", value),
                err_message = 'Password must contain at least one uppercase letter.'
            ),
            FormFieldValidationRule(
                validate_fn = lambda value: re.search(r"[a-z]", value),
                err_message = 'Password must contain at least one lowercase letter.'
            ),
            FormFieldValidationRule(
                validate_fn = lambda value: re.search(r"[0-9]", value),
                err_message = 'Password must contain at least one number.'
            ),
            FormFieldValidationRule(
                validate_fn = lambda value: re.search(r"[!@#$%^&*(),.?\":{}|<>]", value),
                err_message = 'Password must contain at least one special character (!@#$%^&* etc.).'
            ),
        ]
    },
    on_submit = 'perform_login',  # lambda form: print(f"Submitted Form: {form.get_values()}"),
    on_submit_failed = 'process_errors',
    auto_validate = False
)
class Loginform(Column):    # üß© You can replace ft.Container with any other Flet control
    """Reactive Loginform Widget"""

    def __init__(
        self,
        on_submit: Callable,
        on_submit_failed: Optional[Callable] = None, 
        on_forgot_password: Optional[Callable] = None, 
        **kwargs
    ):

        # Hooks
        self.on_submit = on_submit
        self.on_submit_failed = on_submit_failed
        self.on_forgot_password = on_forgot_password

        # Reactive Properties
        self.rx_phone = RxStr("")
        self.rx_password = RxStr("")
        self.rx_is_valid = RxBool(False)
        self.obscured = RxBool(True)
        self.form_errors = RxDict({})
        self.formatted_errors_msg = RxStr('')

        # Define Form Controller
        self.authController: AuthController = FletX.find(
            AuthController, tag = 'auth_ctrl'
        )

        # üõ†Ô∏è kwargs allows passing any Flet control arguments like bgcolor, padding, etc.
        super().__init__(**kwargs)

        # Build contents
        self.controls = self.build()
        

    def validate_email(self, value: str) -> bool:
        """Validate email format"""

        if not value:
            return False
        # Simple regex for email validation
        pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
        return re.match(pattern, value) is not None

    def process_errors(self,errors: Dict[str,Any]):
        """Send Form errors to the page via on_error hook"""

        for field, err in errors.items():
            msg = f'{field}: '
            if isinstance(err, str):
                # Then concetanate it
                msg += '‚Ä¢'+ err

            elif isinstance(err, list):
                msg = '\n‚Ä¢'.join(err)

        # self.error_container.opacity = 1
        # self.rx_is_valid.value = False
        self.formatted_errors_msg.value = msg

        if self.on_submit_failed:
            self.on_submit_failed(errors)

    def perform_login(self, form: Any):
        """Process login form submission"""

        # Get page instance
        page = get_page()

        # Call on_submit callback
        if form.is_valid:
            from_values = form.get_values()
            res = self.authController.login(
                LoginInfo(
                    phone_number = '+228' + from_values.get('phone', ''),
                    password = from_values.get('password', '')
                )
            )

            if not res:
                # If login failed, show error
                self.process_errors({"":self.authController._error_message.value})
                return

        else:
            # If form is not valid, show errors
            print("Form is not valid")
            self.process_errors(form.errors)
            return

        # Show success snackbar
        show_snackbar(
            page, 
            title = "Login Successful", 
            message = "You have successfully logged in.", 
            type = 'success'
        )

        # Navigate to home page or perform any other action
        navigate('/home')

    def build(self) -> List[Control]:
        """Build the component content"""

        return [
            # TITLE TEXT
            # Text(
            #     "Login", 
            #     size = 24, 
            #     animate_opacity = 500
            # ),

            # Phone number field content
            Text(
                "Phone Number",
                size = 14,
                color = Colors.ON_SURFACE_VARIANT,
                weight = FontWeight.BOLD
            ),
            Container(
                height = 60,
                padding = 10,
                border_radius = 15,
                bgcolor = Colors.SURFACE,     #"#0f2f96c3",

                # Content
                content = FromTextField(
                    # label = "",
                    hint_text = "90 00 00 00",
                    rx_value = self.rx_phone,
                    expand = True,
                    filled = False,
                    bgcolor = Colors.TRANSPARENT,
                    focused_bgcolor = Colors.TRANSPARENT,

                    # Border
                    border_radius = 0,
                    border = InputBorder.NONE,

                    # Decoration
                    icon = Icons.PHONE_ANDROID_OUTLINED
                ),
            ),

            # Password field
            Text(
                "Password",
                size = 14,
                color = Colors.ON_SURFACE_VARIANT,
                weight = FontWeight.BOLD
            ),
            Container(
                height = 60,
                padding = 10,
                border_radius = 15,
                bgcolor = Colors.SURFACE, #"#0f2f96c3",

                # Content
                content = FromTextField(
                    # Reactives
                    rx_value = self.rx_password,
                    rx_password = self.obscured,

                    # TextField Attributes
                    hint_text = "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢",
                    expand = True,
                    filled = False,
                    bgcolor = Colors.TRANSPARENT,
                    focused_bgcolor = Colors.TRANSPARENT,

                    # Border
                    border_radius = 15,
                    border = InputBorder.NONE,

                    # Decoration
                    icon = Icons.LOCK_OUTLINED,
                    suffix = Column(
                        expand = True,
                        width = 40,
                        # height = 40,
                        alignment = MainAxisAlignment.CENTER,
                        controls = [
                            IconButton(
                                Icons.VISIBILITY_OUTLINED if not self.obscured.value else Icons.VISIBILITY_OFF_OUTLINED,
                                icon_color = Colors.ON_SURFACE_VARIANT,
                                on_click = lambda _: self.obscured.toggle()
                            )
                        ]
                    )
                ),
            ),

            # SPACE
            Container(
                height = 5
            ),
            
            # Forgot Password
            GestureDetector(
                width = self.width,
                height = 30,
                # alignment = alignment.center_right,
                on_tap = (
                    lambda _ : self.on_forgot_password() 
                    if self.on_forgot_password 
                    else print('hello')
                ),
                content = Container(
                    alignment = alignment.center_right,
                    content = Text(
                        'Forgot Password?',
                        size = 15,
                        color = Colors.ON_SURFACE_VARIANT,
                        weight = FontWeight.W_400
                    )
                )
            ),

            # SPACER
            Container(
                height = 15
            ),

            # Button
            Obx(
                builder_fn = lambda: GestureDetector(
                    on_tap = lambda _: (
                        self.submit() 
                        if not self.authController._is_loading.value 
                        else None
                    ),
                    content = Container(
                        height = 55,
                        expand = True,
                        # width = self.,
                        border_radius = 25,
                        bgcolor = Colors.PRIMARY,

                        content = Row(
                            expand = True,
                            alignment = MainAxisAlignment.CENTER,
                            controls = [
                                (
                                    ProgressRing(width = 30, height = 30, color = Colors.ON_PRIMARY) 
                                    if self.authController._is_loading.value 
                                    else Container()
                                ),
                                Text(
                                    (
                                        'Processing...' 
                                        if self.authController._is_loading.value 
                                        else 'Login'
                                    ),
                                    size = 18,
                                    color = Colors.ON_PRIMARY
                                )
                            ]
                        )
                    )
                ),
            ),

            # SPACER
            Container(
                height = 5
            ),
            
            # Register
            GestureDetector(
                width = self.width,
                height = 30,
                # alignment = alignment.center_right,
                on_tap = (
                    lambda _ : navigate('/register')
                ),
                content = Container(
                    alignment = alignment.center,
                    content = Text(
                        "Don't have an account?",
                        size = 15,
                        color = Colors.ON_SURFACE_VARIANT,
                        weight = FontWeight.W_500
                    )
                )
            ),

            # SPACER
            Container(
                height = 8
            ),
            
            # OR SIGN IN WITH
            Row(
                # expand = True,
                alignment = MainAxisAlignment.CENTER,
                vertical_alignment = CrossAxisAlignment.CENTER,
                controls = [
                    Container(
                        height = 1,
                        expand = True,
                        bgcolor = Colors.GREY_700
                    ),
                    Text(
                        'OR',
                        size = 12,
                        color = Colors.ON_SURFACE_VARIANT,
                        weight = FontWeight.W_500
                    ),
                    Container(
                        height = 1,
                        expand = True,
                        bgcolor = Colors.GREY_700
                    ),
                ]
            ),
            
            # SPACER
            Container(
                height = 15
            ),

            # Social Media Buttons
            Row(
                expand = True,
                alignment = MainAxisAlignment.CENTER,
                controls = [
                    OutlinedButton(
                        width = self.width,
                        height = 50,
                        expand = True,
                        style = ButtonStyle(
                        ),
                        content = Row(
                            alignment = MainAxisAlignment.CENTER,
                            controls = [
                                Image(
                                    src = 'google.png',
                                    width = 20,
                                    height = 20,
                                    fit = ImageFit.CONTAIN
                                ),
                                Text(
                                    'Continue with Google',
                                    size = 14,
                                    color = Colors.ON_SURFACE_VARIANT,
                                    weight = FontWeight.W_500
                                )
                            ]
                        ),
                        on_click = lambda _: print("Google Login")
                    ),
                ]
            ),

            # SPACER
            Container(
                height = 15
            ),
        ]

    def did_mount(self):
        """Setup reactive handlings."""

        # Setup error handling
        self.formatted_errors_msg.listen(
            lambda : show_snackbar(
                get_page(), 
                title = "Form Error", 
                message = self.formatted_errors_msg.value, 
                type = 'error'
            )
        )
