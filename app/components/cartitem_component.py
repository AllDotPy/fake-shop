"""
Cartitem Component.

This component was auto-generated by fletx.

🛠️ Customization Guide:
- You can change the parent class (`ft.Container`) to inherit from any other Flet control.
  → Example: `ft.Text`, `ft.Row`, `ft.Column`, or any custom Flet widget.
- You can add or modify internal reactive attributes.
  → Example: `self.title: RxStr = rx_title`
- You can define simple or advanced bindings using the fletx decorators
"""

from flet import *
from fletx import FletX
from fletx.core import (
    RxInt
)
from fletx.decorators import obx

from app.models import CartItem
from app.controllers import ProductsController


class Cartitem(Container):
    """Reactive Cartitem Widget"""

    def __init__(self, item: CartItem, **kwargs):
        # 📝 Define your reactive properties
        self.item: CartItem = item

        # 🛠️ kwargs allows passing any Flet control arguments like bgcolor, padding, etc.
        super().__init__(
            height = 180,
            bgcolor = Colors.SURFACE,
            border_radius = 15,
            border = Border(
                top = BorderSide(
                    color = Colors.with_opacity(.1, Colors.ON_SURFACE),
                    width = 2
                ),
                bottom = BorderSide(
                    color = Colors.with_opacity(.1, Colors.ON_SURFACE),
                    width = 2
                ),
                left = BorderSide(
                    color = Colors.with_opacity(.1, Colors.ON_SURFACE),
                    width = 2
                ),
                right = BorderSide(
                    color = Colors.with_opacity(.1, Colors.ON_SURFACE),
                    width = 2
                )
            ),
            padding = 12,
            **kwargs
        )

        # Inject Controllers
        self.productController: ProductsController = FletX.find(
            ProductsController, tag = 'product_ctrl'
        )

        self.quantity: RxInt = self.productController.create_rx_int(self.item.quantity)
        self.liked = self.productController.create_rx_bool(self.item.product.has_been_liked)
        self.clicked = False

        self.content = self.build()

        self.setup_effects()

    def setup_effects(self):
        """Setup reactive effects for the component"""

        self.quantity.listen(
            lambda: self.set_item_quantity(self.quantity.value)
        )

    def set_item_quantity(self, quantity: int):
        """Set current CartItem quantity"""

        self.item.quantity = quantity if quantity >= 0 else 0

    def process_like_dislike(self):
        """Process like dislike logic"""

        self.clicked = True 
        # toggle like state
        self.liked.toggle()
        action: str = 'post' if not self.item.product.has_been_liked else 'delete'

        res = self.productController.like_or_dislike(
            self.item.product.id, action = action
        )
        if res:
            self.item.product.has_been_liked = res.has_been_liked
            self.liked.value = res.has_been_liked
        self.clicked = False

    @obx
    def quantity_widget(self):
        """Quantity manupulation widget""",
    
        return Container(
            height = 30,
            width = 110,
            border_radius = 15,
            bgcolor = Theme.scaffold_bgcolor,

            content = Row(
                expand = True,
                vertical_alignment = CrossAxisAlignment.CENTER,
                controls = [
                    IconButton(
                        icon = Icons.REMOVE,
                        icon_color = Colors.ON_SURFACE,
                        on_click = lambda e: self.quantity.decrement()
                    ),

                    Text(
                        f'{self.quantity.value}',
                        size = 16,
                        weight = FontWeight.W_500
                    ),

                    IconButton(
                        icon = Icons.ADD,
                        icon_color = Colors.ON_SURFACE,
                        on_click = lambda e: self.quantity.increment()
                    ),
                ]
            )
        )
    
    @obx
    def like_btn(self):
        """Favorite button"""

        return IconButton(
            bgcolor = Colors.with_opacity(.3, Colors.SURFACE),
            on_click = lambda _ : (
                None    #TODO: Call like action with product controller
                if self.productController._is_loading.value
                else self.process_like_dislike()
            ),
            content = (
                ProgressRing(
                    height = 25,
                    width = 25,
                    color = Colors.ON_SURFACE
                )
                if self.productController._is_loading.value and self.clicked
                else Icon(
                    Icons.FAVORITE,
                    color = Colors.with_opacity(.6, Colors.ON_SURFACE) if not self.liked.value else Colors.PRIMARY,
                ) 
            )
        ) # TODO: CHECK IF USER IS LOGGED IN.

    def build(self):
        """Build the component content"""

        return Column(
            expand = True,
            controls = [
                Row(
                    # height = 80,
                    spacing = 15,
                    expand = True,
                    controls = [
                        #  Image
                        Image(
                            height = 80,
                            width = 80,
                            fit = ImageFit.FILL,
                            border_radius = 10,
                            src = self.item.product.medias[0].file,
                        ),

                        # Name
                        Column(
                            expand = True,
                            spacing = 5,
                            controls = [
                                Text(
                                    f'{self.item.product.name[:150]+'...'}',
                                    size = 14,
                                    max_lines = 2,
                                    weight = FontWeight.W_400
                                ),
                                Row(
                                    expand = True,
                                    alignment = MainAxisAlignment.SPACE_BETWEEN,
                                    controls = [
                                        # CATEGORY
                                        Container(
                                            padding = 4,
                                            border_radius = 20,
                                            bgcolor = Colors.with_opacity(.8, Theme.scaffold_bgcolor),
                                            content = Row(
                                                spacing = 5,
                                                controls = [
                                                    Icon(
                                                        Icons.VERIFIED,
                                                        color = Colors.BLUE_700
                                                    ),
                                                    Text(
                                                        f"verified",
                                                        size = 12,
                                                        color = Colors.with_opacity(
                                                            .7, Colors.ON_SURFACE
                                                        ),
                                                        weight = FontWeight.BOLD,
                                                        text_align = TextAlign.LEFT
                                                    )
                                                ]
                                            ),
                                        ),

                                        # PRICE
                                        Text(
                                            f"{self.item.product.price} FCFA",
                                            size = 18,
                                            color = Colors.PRIMARY,
                                            weight = FontWeight.BOLD,
                                            text_align = TextAlign.LEFT
                                        ),
                                    ]
                                )
                            ]
                        )
                    ]
                ),

                # Divider
                Divider(
                    thickness = 2,
                    color = Colors.with_opacity(
                        .2,
                        Colors.ON_SURFACE
                    )
                ),

                # Actions
                Row(
                    # height = 40,
                    # expand = True,
                    alignment = MainAxisAlignment.SPACE_BETWEEN,
                    controls = [
                        # LIKE
                        self.like_btn(),
                        Row(
                            controls = [
                                # REMOVE BTN
                                IconButton(
                                    icon = Icons.DELETE_OUTLINE,
                                    icon_color = Colors.ERROR,
                                    bgcolor = Theme.scaffold_bgcolor,
                                    on_click = lambda e: self.productController.remove_from_cart(self.item.product)
                                ),
                                self.quantity_widget()
                            ]
                        )
                    ]
                )
            ]
        )